# POD documentation - main docs before the code

=head1 NAME

FuhaoPerl5Lib::FastqKit

=head1 SYNOPSIS

Fasta -related tools

=head1 DESCRIPTION

Fastq toolkit

=head1 FEEDBACK

=head2 Support

Please send you questions or bug reports to Email:

I<lufuhao@gmail.com>

=head1 AUTHORS - Fu-Hao Lu

Email: lufuhao@gmail.com (Always)
       Fu-Hao.Lu@jic.ac.uk (2012-2016)

=head1 CONTRIBUTORS

None

=head1 APPENDIX

Fight against Bioinformatics with Perl ^_^

=cut

#Coding starts
package FuhaoPerl5Lib::FastqKit;
use strict;
use warnings;
use Exporter;
use Cwd;
use vars qw($VERSION @ISA @EXPORT @EXPORT_OK %EXPORT_TAGS);
$VERSION     = '20160822';
@ISA         = qw(Exporter);
@EXPORT      = qw();
@EXPORT_OK   = qw(MergeBam2Fastq ShuffleFastq2Fasta);
%EXPORT_TAGS = ( DEFAULT => [qw(MergeBam2Fastq ShuffleFastq2Fasta)],
                 ALL    => [qw(MergeBam2Fastq ShuffleFastq2Fasta)]);

my $FastqKit_success=1;
my $FastqKit_failure=0;
my $FastqKit_debug=0;



### Merge fastq files generated by bam2fastq into one fastq file
### MergeBam2Fastq($out.fq, ('R1 => $fastqR1, 'R2' => fastqR2, 'M' => $fastqUnpaired)
### Global: $FastqKit_success=1; $FastqKit_failure=0;
### Dependency: zcat
### Note:
sub MergeBam2Fastq {
	my ($MBFoutfq, $MBFbam2fastq)=@_;
	
	local *MBFOUTFQ;
	my $MBFsubinfo='SUB(FastqKit::MergeBam2Fastq)';
	
	unless (defined $MBFoutfq) {
		print STDERR $MBFsubinfo, "Error: invalid output Fastq fiilename\n";
		return $FastqKit_failure;
	}
	unlink $MBFoutfq if (-e $MBFoutfq);
	
	close MBFOUTFQ if (defined fileno(MBFOUTFQ));
	unless (open (MBFOUTFQ, "> $MBFoutfq")) {
		print STDERR $MBFsubinfo, "Error: can not write output Fastq: $MBFoutfq\n";
		return $FastqKit_failure;
	}
	
	if (exists ${$MBFbam2fastq}{'R1'} and -s ${$MBFbam2fastq}{'R1'} and exists ${$MBFbam2fastq}{'R2'} and -s ${$MBFbam2fastq}{'R2'}) {
		close MBFQR1 if (defined fileno(MBFQR1));
		close MBFQR2 if (defined fileno(MBFQR2));
		if (${$MBFbam2fastq}{'R1'} =~/(\.fq$)|(\.fastq$)/i) {
			unless (open (MBFQR1, "< ${$MBFbam2fastq}{'R1'}")) {
				print STDERR $MBFsubinfo, "Error: can not open R1 Fastq: ${$MBFbam2fastq}{'R1'}\n";
				return $FastqKit_failure;
			}
		}
		elsif (${$MBFbam2fastq}{'R1'} =~/(\.fq\.gz$)|(\.fastq\.gz$)/i) {
			unless (open (MBFQR1, "zcat ${$MBFbam2fastq}{'R1'} | ")) {
				print STDERR $MBFsubinfo, "Error: can not open gziped R1 Fastq: ${$MBFbam2fastq}{'R1'}\n";
				return $FastqKit_failure;
			}
		}
		else {
			print STDERR $MBFsubinfo, "Error: can not guess R1 Fastq format: ${$MBFbam2fastq}{'R1'}\n";
			return $FastqKit_failure;
		}
		if (${$MBFbam2fastq}{'R2'} =~/(\.fq$)|(\.fastq$)/i) {
			unless (open (MBFQR2, "< ${$MBFbam2fastq}{'R2'}")) {
				print STDERR $MBFsubinfo, "Error: can not open R2 Fastq: ${$MBFbam2fastq}{'R2'}\n";
				return $FastqKit_failure;
			}
		}
		elsif (${$MBFbam2fastq}{'R2'} =~/(\.fq\.gz$)|(\.fastq\.gz$)/i) {
			unless (open (MBFQR2, "zcat ${$MBFbam2fastq}{'R2'} | ")) {
				print STDERR $MBFsubinfo, "Error: can not open gziped R2 Fastq: ${$MBFbam2fastq}{'R2'}\n";
				return $FastqKit_failure;
			}
		}
		else {
			print STDERR $MBFsubinfo, "Error: can not guess R2 Fastq format: ${$MBFbam2fastq}{'R2'}\n";
			return $FastqKit_failure;
		}
		while (my $MBFline=<MBFQR1>) {
			print MBFOUTFQ $MBFline;
			$MBFline=<MBFQR1>; print MBFOUTFQ $MBFline;
			$MBFline=<MBFQR1>; print MBFOUTFQ $MBFline;
			$MBFline=<MBFQR1>; print MBFOUTFQ $MBFline;
			$MBFline=<MBFQR2>; print MBFOUTFQ $MBFline;
			$MBFline=<MBFQR2>; print MBFOUTFQ $MBFline;
			$MBFline=<MBFQR2>; print MBFOUTFQ $MBFline;
			$MBFline=<MBFQR2>; print MBFOUTFQ $MBFline;
		}
		close MBFQR1;
		close MBFQR2;
	}
	
	if (exists ${$MBFbam2fastq}{'M'} and -s ${$MBFbam2fastq}{'M'}) {
		close MBFQM if (defined fileno(MBFQM));
		if (${$MBFbam2fastq}{'M'} =~/(\.fq$)|(\.fastq$)/i) {
			unless (open (MBFQM, "< ${$MBFbam2fastq}{'M'}")) {
				print STDERR $MBFsubinfo, "Error: can not open UNPAIRED Fastq: ${$MBFbam2fastq}{'M'}\n";
				return $FastqKit_failure;
			}
		}
		elsif (${$MBFbam2fastq}{'M'} =~/(\.fq\.gz$)|(\.fastq\.gz$)/i) {
			unless (open (MBFQM, "zcat ${$MBFbam2fastq}{'M'} | ")) {
				print STDERR $MBFsubinfo, "Error: can not open gziped UNPAIRED Fastq: ${$MBFbam2fastq}{'M'}\n";
				return $FastqKit_failure;
			}
		}
		else {
			print STDERR $MBFsubinfo, "Error: can not guess UNPAIRED Fastq format: ${$MBFbam2fastq}{'M'}\n";
			return $FastqKit_failure;
		}
		while (my $MBFline=<MBFQM>) {
			print MBFOUTFQ $MBFline;
			$MBFline=<MBFQM>; print MBFOUTFQ $MBFline;
			$MBFline=<MBFQM>; print MBFOUTFQ $MBFline;
			$MBFline=<MBFQM>; print MBFOUTFQ $MBFline;
		}
		close MBFQM;
	}
	
	close MBFOUTFQ;
	
	if (-s $MBFoutfq) {
		return $FastqKit_success;
	}
	else {
		return $FastqKit_failure;
	}
}



### SHUFFLE paired fastq to fasta
### ShuffleFastq2Fasta($forward_reads.fq[.gz], $reverse_reaads.fq[.gz], $outfile.fa[.gz])
### Global: $FastqKit_success=1; $FastqKit_failure=0;
### Dependency: zcat, gzip
### Note:
sub ShuffleFastq2Fasta {
	my ($SFFpe1fastq, $SFFpe2fastq, $SFFout_fasta)=@_;
	
	my $SFFsubinfo='SUB(FastqKit::ShuffleFastq2Fasta)';
	local *SFFPE1FASTQ; local *SFFPE2FASTQ; local *SFFOUTFASTA;
		
	unless (defined $SFFpe1fastq and -e $SFFpe1fastq) {
		print STDERR $SFFsubinfo, "Error: invalid R1 fastq files\n";
		return $FastqKit_failure;
	}
	unless (defined $SFFpe2fastq and -e $SFFpe2fastq) {
		print STDERR $SFFsubinfo, "Error: invalid R2 fastq files\n";
		return $FastqKit_failure;
	}
	unless (defined $SFFout_fasta and $SFFout_fasta=~/^\S+$/) {
		print STDERR $SFFsubinfo, "Warnings: undefined/invalid output fasta file name.\n";
		return $FastqKit_failure;
	}
	if (-e "$SFFout_fasta") {
		unlink "$SFFout_fasta";
		print STDERR $SFFsubinfo, "Warnings: existing output fasta file deleted.\n";
	}
	
### open R1 fastq
	close SFFPE1FASTQ if (defined fileno(SFFPE1FASTQ));
	if ($SFFpe1fastq=~/\.gz$/i) {
		print $SFFsubinfo, "Info: gzipped R1 FASTQ file detected: $SFFpe1fastq\n";
		unless (open(SFFPE1FASTQ, "zcat $SFFpe1fastq |")) {
			print $SFFsubinfo, "Error: can not open gzipped R1 FASTQ file\n";
			return $FastqKit_failure;
		}
	}
	elsif ($SFFpe1fastq=~/(\.fq$)|(\.fastq$)/i) {
		print $SFFsubinfo, "Info: flat R1 FASTQ file detected: $SFFpe1fastq\n";
		unless (open(SFFPE1FASTQ, "< $SFFpe1fastq")) {
			print $SFFsubinfo, "Error: can not open flat R1 FASTQ file\n";
			return $FastqKit_failure;
		}
	}
	else {
		print $SFFsubinfo, "Error: do NOT known how to open R1 FASTQ file: $SFFpe1fastq\n";
		return $FastqKit_failure;
	}
### open R2 fastq
	close SFFPE2FASTQ if (defined fileno(SFFPE2FASTQ));
	if ($SFFpe2fastq=~/\.gz$/i) {
		print $SFFsubinfo, "Info: gzipped R2 FASTQ file detected: $SFFpe2fastq\n";
		unless (open(SFFPE2FASTQ, "zcat $SFFpe2fastq |")) {
			print $SFFsubinfo, "Error: can not open gzipped R2 FASTQ file\n";
			return $FastqKit_failure;
		}
	}
	elsif ($SFFpe2fastq=~/(\.fq$)|(\.fastq$)/i) {
		print $SFFsubinfo, "Info: flat R2 FASTQ file detected: $SFFpe2fastq\n";
		unless (open(SFFPE2FASTQ, "< $SFFpe2fastq ")) {
			print $SFFsubinfo, "Error: can not open flat R2 FASTQ file\n";
			return $FastqKit_failure;
		}
	}
	else {
		print $SFFsubinfo, "Error: do NOT known how to open R2 FASTQ file: $SFFpe2fastq\n";
		return $FastqKit_failure;
	}
### open output fasta
	close SFFOUTFASTA if (defined fileno(SFFOUTFASTA));
	if ($SFFout_fasta=~/(\.fa$)|(\.fas$)|(\.fasta$)/i) {
		unless (open(SFFOUTFASTA, "> $SFFout_fasta")) {
			print $SFFsubinfo, "Error: can not write flat output fasta: $SFFout_fasta\n";
			return $FastqKit_failure;
		}
	}
	elsif ($SFFout_fasta=~/.gz$/i) {
		unless (open(SFFOUTFASTA, " | gzip -9 -c > $SFFout_fasta")) {
			print $SFFsubinfo, "Error: can not write gzipped output fasta: $SFFout_fasta\n";
			return $FastqKit_failure;
		}
	}
	else {
		print $SFFsubinfo, "Error: do not known how to write output fasta: $SFFout_fasta\n";
		return $FastqKit_failure;
	}
	while (my $SFFline1=<SFFPE1FASTQ>) {
		$SFFline1=~s/\s+.*$/\/1/;### Note: readname 1:N:0. comment this line if readname/1
		$SFFline1=~s/^\@/\>/;
		print SFFOUTFASTA $SFFline1;
		$SFFline1=<SFFPE1FASTQ>; print SFFOUTFASTA $SFFline1;
		$SFFline1=<SFFPE1FASTQ>;
		$SFFline1=<SFFPE1FASTQ>;
		my $SFFline2=<SFFPE2FASTQ>;
		$SFFline2=~s/\s+.*$/\/2/;### Note: readname 2:N:0. comment this line if readname/2
		$SFFline2=~s/^\@/\>/;
		print SFFOUTFASTA $SFFline2;
		$SFFline2=<SFFPE2FASTQ>; print SFFOUTFASTA $SFFline2;
		$SFFline2=<SFFPE2FASTQ>;
		$SFFline2=<SFFPE2FASTQ>;
	}
	close SFFPE1FASTQ;
	close SFFPE2FASTQ;
	close SFFOUTFASTA;
	if (-s "$SFFout_fasta") {
		print $SFFsubinfo, "Info: fastq file successfully converted: $SFFout_fasta\n";
		return $FastqKit_success;
	}
	else {
		print STDERR $SFFsubinfo, "Error: Failed to convert fastq to fasta: $SFFout_fasta\n";
		return $FastqKit_failure;
	}
}


#$FastqKit_success; $FastqKit_failure;
1;
